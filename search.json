[{"path":"https://ckntav.github.io/gVenn/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 gVenn authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"gVenn stands gene/genomic Venn. provides tools compute overlaps genomic regions sets genes visualize Venn diagrams areas proportional number overlapping elements. addition, package can generate UpSet plots cases many sets, offering clear alternative complex Venn diagrams. seamless support GRanges GRangesList objects, gVenn integrates naturally Bioconductor workflows ChIP-seq, ATAC-seq, interval-based analyses. Overlap groups can easily extracted analysis, motif enrichment, transcription factor binding enrichment, gene annotation. gVenn package produces clean, publication-ready figures.","code":""},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"gVenn package available Bioconductor GitHub. can install Bioconductor using: install development version GitHub, use:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"gVenn\") # install.packages(\"pak\")  # if not already installed pak::pak(\"ckntav/gVenn\")  # or, alternatively: # install.packages(\"devtools\")  # if not already installed devtools::install_github(\"ckntav/gVenn\")"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"Example workflow","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"section demonstrates typical workflow gVenn, computing overlaps generating clean, publication-ready figures. examples show work genomic interval data. start loading package:","code":"library(gVenn)"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"load-example-chip-seq-peak-sets-genomic","dir":"Articles","previous_headings":"Example workflow","what":"1. Load example ChIP-seq peak sets (genomic)","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"use dataset a549_chipseq_peaks, contains example consensus peak subsets MED1, BRD4, GR dexamethasone treatment A549 cells. keep dataset small suitable examples tests, set restricted peaks located chromosome 7. data originate Tav et al. (2023) (doi:10.3389/fgene.2023.1237092).","code":"# Load the example A549 ChIP-seq peaks (subset on chr7 for demo) data(a549_chipseq_peaks)"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"compute-overlaps-between-genomic-regions","dir":"Articles","previous_headings":"Example workflow","what":"2. Compute overlaps between genomic regions","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"compute overlaps ChIP-seq peak sets using computeOverlaps(): result structured GenomicOverlapResult object contains: GRanges object, region includes metadata describing overlap pattern across input sets. associated logical matrix (data frame) indicating reduced regions overlap input sets.","code":"genomic_overlaps <- computeOverlaps(a549_chipseq_peaks)"},{"path":[]},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"venn-diagram","dir":"Articles","previous_headings":"Example workflow > 3. Visualization","what":"Venn diagram","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"plotVenn() draws proportional Venn diagrams overlap object.","code":"plotVenn(genomic_overlaps)"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"upset-plot","dir":"Articles","previous_headings":"Example workflow > 3. Visualization","what":"UpSet plot","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"three sets, Venn diagram areas exactly proportional intersections generally mathematically attainable. Solvers (like used eulerr) provide best-effort approximations, layout can become hard read. cases, UpSet plot recommended visualization scales cleanly many sets preserves intersection sizes precisely bar axes. therefore suggest using plotUpSet() > 3 sets (time Venn becomes visually crowded).","code":"plotUpSet(genomic_overlaps)"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"export-visualization","dir":"Articles","previous_headings":"Example workflow > 3. Visualization","what":"Export visualization","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"can export visualization using saveViz(): default, files written current directory (“.”). enabled date option (today), current date prepended filename. can also export PNG SVG:","code":"venn <- plotVenn(genomic_overlaps) saveViz(venn,         output_dir = \".\",         output_file = \"figure_gVenn\",         format = \"pdf\") saveViz(venn,         output_dir = \".\",         output_file = \"figure_gVenn\",         format = \"png\")  saveViz(venn,         output_dir = \".\",         output_file = \"figure_gVenn\",         format = \"svg\")"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"extract-elements-per-overlap-group","dir":"Articles","previous_headings":"Example workflow","what":"4. Extract elements per overlap group","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"example: 243 peaks shared across three factors (MED1, BRD4, GR) 267 peaks unique BRD4 48 peaks shared MED1 BRD4 ","code":"groups <- extractOverlaps(genomic_overlaps) # Display the number of genomic regions per overlap group sapply(groups, length) #> group_010 group_001 group_100 group_110 group_011 group_101 group_111  #>       267       125         4        48        46        16       243"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"overlap-group-naming","dir":"Articles","previous_headings":"Example workflow > 4. Extract elements per overlap group","what":"Overlap group naming","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"overlaps computed, group elements genomic regions labeled binary code indicates sets element belongs . digit code corresponds one input set (e.g., , B, C). 1 means element present set, 0 means absent. group names output prefixed “group_” clarity.","code":""},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"extract-one-particular-group","dir":"Articles","previous_headings":"Example workflow > 4. Extract elements per overlap group","what":"Extract one particular group","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"overlap group can accessed directly name downstream analyses, including motif enrichment, transcription factor (TF) enrichment, annotation peaks nearby genes, functional enrichment visualization. example, extract elements present ∩ B ∩ C:","code":"# Extract elements in group_111 (present in all three sets: MED1, BRD4, and GR) peaks_in_all_sets <- groups[[\"group_111\"]]  # Display the elements peaks_in_all_sets #> GRanges object with 243 ranges and 1 metadata column: #>         seqnames              ranges strand | intersect_category #>            <Rle>           <IRanges>  <Rle> |        <character> #>     [1]     chr7     1156721-1157555      * |                111 #>     [2]     chr7     1520256-1521263      * |                111 #>     [3]     chr7     2309811-2310529      * |                111 #>     [4]     chr7     3027924-3028466      * |                111 #>     [5]     chr7     3436651-3437214      * |                111 #>     ...      ...                 ...    ... .                ... #>   [239]     chr7 158431413-158433728      * |                111 #>   [240]     chr7 158818200-158819318      * |                111 #>   [241]     chr7 158821076-158821876      * |                111 #>   [242]     chr7 158863108-158864616      * |                111 #>   [243]     chr7 159015311-159016245      * |                111 #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"export-overlap-groups","dir":"Articles","previous_headings":"Example workflow > 4. Extract elements per overlap group","what":"Export overlap groups","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"overlap group (e.g., group_100, group_110, group_111) can exported downstream analysis. gVenn package provides two export functions depending data type downstream needs:","code":""},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"for-all-overlap-types-genomic-or-gene-sets","dir":"Articles","previous_headings":"Example workflow > 4. Extract elements per overlap group > Export overlap groups","what":"For all overlap types (genomic or gene sets):","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"function exportOverlaps() writes group Excel file one sheet per overlap group, making easy review reuse results outside R.","code":"# export overlaps to Excel file exportOverlaps(groups,                output_dir = \".\",                output_file = \"overlap_groups\")"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"for-genomic-overlaps-only","dir":"Articles","previous_headings":"Example workflow > 4. Extract elements per overlap group > Export overlap groups","what":"For genomic overlaps only:","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"working genomic regions (GRanges objects), can export overlap groups BED files using exportOverlapsToBed(). creates one BED file per overlap group, ideal visualization genome browsers (IGV, UCSC Genome Browser) downstream analyses requiring BED format input.","code":"# Export genomic overlaps to BED files exportOverlapsToBed(groups,                     output_dir = \".\",                     output_prefix = \"overlaps\")  # This will create separate BED files such as: # - overlaps_group_100.bed # - overlaps_group_110.bed # - overlaps_group_111.bed # etc."},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"customization-examples","dir":"Articles","previous_headings":"","what":"Customization examples","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"section shows common ways customize Venn diagram produced plotVenn(). examples use built-gene_list dataset.","code":"# load the example gene_list data(gene_list)  # compute overlaps between gene sets res_sets <- computeOverlaps(gene_list)  # basic default venn plot (uses package defaults) plotVenn(res_sets)"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"custom-fills-with-transparency","dir":"Articles","previous_headings":"Customization examples","what":"Custom fills with transparency","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"","code":"plotVenn(res_sets,          fills = list(fill = c(\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\"), alpha = 0.5),          legend = \"right\",          main = list(label = \"Custom fills (transparent)\", fontsize = 14))"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"colored-edges-no-fills-colored-borders-only","dir":"Articles","previous_headings":"Customization examples","what":"Colored edges, no fills (colored borders only)","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"","code":"plotVenn(res_sets,          fills = \"transparent\",          edges = list(col = c(\"red\", \"blue\", \"darkgreen\"), lwd = 2),          main = list(label = \"Colored borders only\"))"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"custom-labels-and-counts-percentages","dir":"Articles","previous_headings":"Customization examples","what":"Custom labels and counts + percentages","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"","code":"plotVenn(res_sets,          labels = list(col = \"black\", fontsize = 12, font = 2),          quantities = list(type = c(\"counts\",\"percent\"),                            col = \"black\", fontsize = 10),          main = list(label = \"Counts + Percentages\", fontsize = 14))"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"legend-at-the-bottom-with-custom-text","dir":"Articles","previous_headings":"Customization examples","what":"Legend at the bottom with custom text","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"","code":"plotVenn(res_sets,          legend = list(side = \"bottom\",                        labels = c(\"Treatment A\",\"Treatment B\",\"Control\"),                        fontsize = 10),          main = list(label = \"Custom legend\"))"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"combining-multiple-custom-options","dir":"Articles","previous_headings":"Customization examples","what":"Combining multiple custom options","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"","code":"plotVenn(res_sets,          fills = list(fill = c(\"#2B70AB\", \"#FFB027\", \"#3EA742\"), alpha = 0.6),          edges = list(col = \"gray30\", lwd = 1.5),          labels = list(col = \"black\", fontsize = 7, font = 2),          quantities = list(type = \"counts\", col = \"black\", fontsize = 10),          main = list(label = \"multiple custom options Venn\", fontsize = 16, font = 2),          legend = FALSE)"},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"vignette built following R session:","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] gVenn_0.99.4         GenomicRanges_1.60.0 GenomeInfoDb_1.44.3  #> [4] IRanges_2.42.0       S4Vectors_0.46.0     BiocGenerics_0.54.1  #> [7] generics_0.1.4       #>  #> loaded via a namespace (and not attached): #>  [1] eulerr_7.0.4            sass_0.4.10             shape_1.4.6.1           #>  [4] polylabelr_0.3.0        stringi_1.8.7           magrittr_2.0.4          #>  [7] digest_0.6.37           evaluate_1.0.5          grid_4.5.1              #> [10] timechange_0.3.0        RColorBrewer_1.1-3      iterators_1.0.14        #> [13] circlize_0.4.16         fastmap_1.2.0           foreach_1.5.2           #> [16] doParallel_1.0.17       jsonlite_2.0.0          GlobalOptions_0.1.2     #> [19] httr_1.4.7              ComplexHeatmap_2.24.1   UCSC.utils_1.4.0        #> [22] codetools_0.2-20        textshaping_1.0.4       jquerylib_0.1.4         #> [25] cli_3.6.5               rlang_1.1.6             crayon_1.5.3            #> [28] polyclip_1.10-7         XVector_0.48.0          cachem_1.1.0            #> [31] yaml_2.3.10             tools_4.5.1             parallel_4.5.1          #> [34] colorspace_2.1-2        GenomeInfoDbData_1.2.14 GetoptLong_1.0.5        #> [37] vctrs_0.6.5             R6_2.6.1                png_0.1-8               #> [40] matrixStats_1.5.0       lifecycle_1.0.4         lubridate_1.9.4         #> [43] stringr_1.5.2           fs_1.6.6                clue_0.3-66             #> [46] cluster_2.1.8.1         ragg_1.5.0              desc_1.4.3              #> [49] pkgdown_2.1.3           bslib_0.9.0             glue_1.8.0              #> [52] Rcpp_1.1.0              systemfonts_1.3.1       xfun_0.53               #> [55] knitr_1.50              rjson_0.2.23            htmltools_0.5.8.1       #> [58] rmarkdown_2.30          compiler_4.5.1"},{"path":[]},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"example-a549-chip-seq-dataset","dir":"Articles","previous_headings":"References","what":"Example A549 ChIP-seq dataset","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"Tav, C., Fournier, É., Fournier, M., Khadangi, F., Baguette, ., Côté, M.C., Silveira, M..D., Bérubé-Simard, F.-., Bourque, G., Droit, ., & Bilodeau, S. (2023). Glucocorticoid stimulation induces regionalized gene responses within topologically associating domains. Frontiers Genetics, 14, 1237092.  doi:10.3389/fgene.2023.1237092","code":""},{"path":"https://ckntav.github.io/gVenn/articles/gVenn.html","id":"supporting-packages","dir":"Articles","previous_headings":"References","what":"Supporting packages","title":"gVenn: Proportional Venn diagrams for genomic regions and gene set overlaps","text":"eulerr : Larsson, J. (2023). eulerr: Area-Proportional Euler Venn Diagrams Ellipses.  CRAN package page ComplexHeatmap : Gu, Z., Eils, R., & Schlesner, M. (2016). Complex heatmaps reveal patterns correlations multidimensional genomic data. Bioinformatics, 32(18), 2847–2849.  doi:10.1093/bioinformatics/btw313","code":""},{"path":"https://ckntav.github.io/gVenn/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christophe Tav. Author, maintainer.","code":""},{"path":"https://ckntav.github.io/gVenn/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tav C (2025). gVenn: Proportional Venn UpSet Diagrams Gene Sets Genomic Regions. R package version 0.99.4, https://github.com/ckntav/gVenn.","code":"@Manual{,   title = {gVenn: Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions},   author = {Christophe Tav},   year = {2025},   note = {R package version 0.99.4},   url = {https://github.com/ckntav/gVenn}, }"},{"path":"https://ckntav.github.io/gVenn/index.html","id":"gvenn","dir":"","previous_headings":"","what":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"Proportional Venn diagrams genomic regions gene set overlaps  gVenn stands gene/genomic Venn. provides tools compute overlaps genomic regions sets genes visualize Venn diagrams areas proportional number overlapping elements. seamless support GRanges GRangesList objects, gVenn integrates naturally Bioconductor workflows ChIP-seq, ATAC-seq, interval-based analyses, produces clean, publication-ready figures.","code":""},{"path":"https://ckntav.github.io/gVenn/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"gVenn package available Bioconductor GitHub. can install Bioconductor using: install development version GitHub, use:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"gVenn\") # install.packages(\"pak\")  # if not already installed pak::pak(\"ckntav/gVenn\")  # or, alternatively: # install.packages(\"devtools\")  # if not already installed devtools::install_github(\"ckntav/gVenn\")"},{"path":"https://ckntav.github.io/gVenn/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"quick example demonstrates compute overlaps ChIP-seq peaks visualize Venn diagram UpSet plot.","code":""},{"path":"https://ckntav.github.io/gVenn/index.html","id":"id_1-load-example-chip-seq-data-and-compute-overlaps","dir":"","previous_headings":"Quick start","what":"1. Load example ChIP-seq data and compute overlaps","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"","code":"library(gVenn)  # Example dataset of ChIP-seq peaks (A549 cell line, 3 set of genomic regions) data(a549_chipseq_peaks)  # Compute overlaps ov <- computeOverlaps(a549_chipseq_peaks) #> Loading required namespace: GenomicRanges"},{"path":"https://ckntav.github.io/gVenn/index.html","id":"id_2-visualize","dir":"","previous_headings":"Quick start","what":"2. Visualize","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"","code":"# Draw Venn diagram plotVenn(ov) # Draw UpSet plot (useful for larger numbers of sets) plotUpSet(ov)"},{"path":"https://ckntav.github.io/gVenn/index.html","id":"id_3-extract-elements-per-overlap-group","dir":"","previous_headings":"Quick start","what":"3. Extract elements per overlap group","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"example: 243 peaks shared across three factors (MED1, BRD4, GR) 267 peaks unique BRD4 48 peaks shared MED1 BRD4 ","code":"groups <- extractOverlaps(ov) # Display the number of genomic regions per overlap group sapply(groups, length) #> group_010 group_001 group_100 group_110 group_011 group_101 group_111  #>       267       125         4        48        46        16       243"},{"path":"https://ckntav.github.io/gVenn/index.html","id":"overlap-group-naming","dir":"","previous_headings":"Quick start > 3. Extract elements per overlap group","what":"Overlap group naming","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"overlaps computed, group elements genomic regions labeled binary code indicates sets element belongs . digit code corresponds one input set (e.g., , B, C). 1 means element present set, 0 means absent. group names output prefixed “group_” clarity.","code":""},{"path":"https://ckntav.github.io/gVenn/index.html","id":"retrieve-one-particular-overlap-group","dir":"","previous_headings":"Quick start > 3. Extract elements per overlap group","what":"Retrieve one particular overlap group","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"overlap group can accessed directly name downstream analyses, including motif enrichment, transcription factor (TF) enrichment, annotation peaks nearby genes, functional enrichment visualization. example, extract elements present ∩ B ∩ C:","code":"# Extract elements in group_111 (present in all three sets: MED1_Dex_chr7, BRD4_Dex_chr7, GR_Dex_chr7) peaks_in_all_sets <- groups[[\"group_111\"]]  # Display the elements peaks_in_all_sets #> GRanges object with 243 ranges and 1 metadata column: #>         seqnames              ranges strand | intersect_category #>            <Rle>           <IRanges>  <Rle> |        <character> #>     [1]     chr7     1156721-1157555      * |                111 #>     [2]     chr7     1520256-1521263      * |                111 #>     [3]     chr7     2309811-2310529      * |                111 #>     [4]     chr7     3027924-3028466      * |                111 #>     [5]     chr7     3436651-3437214      * |                111 #>     ...      ...                 ...    ... .                ... #>   [239]     chr7 158431413-158433728      * |                111 #>   [240]     chr7 158818200-158819318      * |                111 #>   [241]     chr7 158821076-158821876      * |                111 #>   [242]     chr7 158863108-158864616      * |                111 #>   [243]     chr7 159015311-159016245      * |                111 #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths"},{"path":"https://ckntav.github.io/gVenn/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Proportional Venn and UpSet Diagrams for Gene Sets and Genomic Regions","text":"Pull requests welcome. find bug, suggestion, want add feature, please open issue first discuss like change.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/a549_chipseq_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","title":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","text":"Example consensus peak subsets MED1, BRD4, GR dexamethasone treatment A549 cells. set restricted peaks chr7 keep dataset small suitable examples tests.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/a549_chipseq_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","text":"","code":"a549_chipseq_peaks"},{"path":"https://ckntav.github.io/gVenn/reference/a549_chipseq_peaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","text":"GRangesList 3 named elements: MED1_Dex_chr7 Consensus MED1 peaks (chr7 subset). BRD4_Dex_chr7 Consensus BRD4 peaks (chr7 subset). GR_Dex_chr7 Consensus GR peaks (chr7 subset).","code":""},{"path":"https://ckntav.github.io/gVenn/reference/a549_chipseq_peaks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","text":"Internal consensus peak sets processed A549 cells dexamethasone stimulation.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/a549_chipseq_peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","text":"original full consensus peak sets available gzipped BED files inst/extdata/: A549_MED1_Dex.stdchr.bed.gz A549_BRD4_Dex.stdchr.bed.gz A549_GR_Dex.stdchr.bed.gz trimmed, package efficiency dataset (a549_chipseq_peaks) includes chr7 subsets.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/a549_chipseq_peaks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","text":"Tav C, Fournier É, Fournier M, Khadangi F, Baguette , Côté MC, Silveira MAD, Bérubé-Simard F-, Bourque G, Droit , Bilodeau S (2023). \"Glucocorticoid stimulation induces regionalized gene responses within topologically associating domains.\" Frontiers Genetics. doi:10.3389/fgene.2023.1237092","code":""},{"path":"https://ckntav.github.io/gVenn/reference/a549_chipseq_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A549 ChIP-seq Consensus Peak Subsets (Dex, chr7) — a549_chipseq_peaks","text":"","code":"# Load dataset data(a549_chipseq_peaks) a549_chipseq_peaks #> Loading required namespace: GenomicRanges #> GRangesList object of length 3: #> $MED1_Dex_chr7 #> GRanges object with 336 ranges and 2 metadata columns: #>         seqnames              ranges strand |        name     score #>            <Rle>           <IRanges>  <Rle> | <character> <numeric> #>     [1]     chr7     1157024-1157513      * |        4997         0 #>     [2]     chr7     1520389-1521218      * |        4998         0 #>     [3]     chr7     1536927-1537642      * |        4999         0 #>     [4]     chr7     2309837-2310506      * |        5000         0 #>     [5]     chr7     3028013-3028396      * |        5001         0 #>     ...      ...                 ...    ... .         ...       ... #>   [332]     chr7 158733134-158733544      * |        5328         0 #>   [333]     chr7 158818327-158819201      * |        5329         0 #>   [334]     chr7 158821150-158821448      * |        5330         0 #>   [335]     chr7 158863388-158864513      * |        5331         0 #>   [336]     chr7 159015348-159016094      * |        5332         0 #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths #>  #> $BRD4_Dex_chr7 #> GRanges object with 604 ranges and 2 metadata columns: #>         seqnames              ranges strand |        name     score #>            <Rle>           <IRanges>  <Rle> | <character> <numeric> #>     [1]     chr7       234690-235402      * |        9419         0 #>     [2]     chr7       538240-538633      * |        9420         0 #>     [3]     chr7     1156721-1157555      * |        9421         0 #>     [4]     chr7     1504294-1504733      * |        9422         0 #>     [5]     chr7     1506830-1507301      * |        9423         0 #>     ...      ...                 ...    ... .         ...       ... #>   [600]     chr7 158829343-158830028      * |       10018         0 #>   [601]     chr7 158856251-158856723      * |       10019         0 #>   [602]     chr7 158863108-158864616      * |       10020         0 #>   [603]     chr7 159012435-159013222      * |       10021         0 #>   [604]     chr7 159015311-159016245      * |       10022         0 #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths #>  #> $GR_Dex_chr7 #> GRanges object with 450 ranges and 2 metadata columns: #>         seqnames              ranges strand |        name     score #>            <Rle>           <IRanges>  <Rle> | <character> <numeric> #>     [1]     chr7       729847-730122      * |        6571         0 #>     [2]     chr7     1156806-1157495      * |        6572         0 #>     [3]     chr7     1520508-1521044      * |        6573         0 #>     [4]     chr7     2309959-2310483      * |        6574         0 #>     [5]     chr7     2860620-2860960      * |        6575         0 #>     ...      ...                 ...    ... .         ...       ... #>   [446]     chr7 158733144-158733534      * |        7016         0 #>   [447]     chr7 158818350-158819168      * |        7017         0 #>   [448]     chr7 158821076-158821582      * |        7018         0 #>   [449]     chr7 158863549-158864364      * |        7019         0 #>   [450]     chr7 159015407-159016007      * |        7020         0 #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths #>   # Compute overlaps and plot ov <- computeOverlaps(a549_chipseq_peaks) plotVenn(ov)"},{"path":"https://ckntav.github.io/gVenn/reference/computeOverlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Overlaps Between Multiple Sets or Genomic Regions — computeOverlaps","title":"Compute Overlaps Between Multiple Sets or Genomic Regions — computeOverlaps","text":"computeOverlaps() main entry point overlap analysis. accepts either genomic region objects (GRanges/GRangesList) ordinary sets (character/numeric vectors) computes binary overlap matrix describing presence absence element across sets.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/computeOverlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Overlaps Between Multiple Sets or Genomic Regions — computeOverlaps","text":"","code":"computeOverlaps(x)"},{"path":"https://ckntav.github.io/gVenn/reference/computeOverlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Overlaps Between Multiple Sets or Genomic Regions — computeOverlaps","text":"x Input sets. One : GRangesList object. named list GRanges objects. named list atomic vectors (character, numeric, factor, etc.), type.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/computeOverlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Overlaps Between Multiple Sets or Genomic Regions — computeOverlaps","text":"S3 object encoding overlap result whose class depends input type: GenomicOverlapResult Returned input genomic (GRangesList list GRanges). list : reduced_regions: GRanges object containing merged (non-redundant) intervals. region annotated intersect_category column. overlap_matrix: logical matrix indicating whether reduced region overlaps input set (rows = regions, columns = sets). SetOverlapResult Returned input list atomic vectors. list : unique_elements: Character vector unique elements across sets. overlap_matrix: logical matrix indicating whether element present set (rows = elements, columns = sets). intersect_category: Character vector category codes (e.g., \"110\") element.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/computeOverlaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Overlaps Between Multiple Sets or Genomic Regions — computeOverlaps","text":"provided genomic regions, function merges intervals non-redundant set (reduce()), determines original sets region overlaps. provided ordinary sets (e.g., gene symbols), collects unique elements records sets contain . resulting object encodes overlap matrix compact category labels (e.g., \"110\") representing overlap pattern element. results can directly passed visualization functions plotVenn() plotUpSet(). Internally, computeOverlaps() dispatches either computeGenomicOverlaps() (genomic inputs) computeSetOverlaps() (ordinary sets). Users encouraged call computeOverlaps().","code":""},{"path":[]},{"path":"https://ckntav.github.io/gVenn/reference/computeOverlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Overlaps Between Multiple Sets or Genomic Regions — computeOverlaps","text":"","code":"# Example with gene sets (built-in dataset) data(gene_list) ov_sets <- computeOverlaps(gene_list) head(ov_sets$overlap_matrix) #>          random_genes_A random_genes_B random_genes_C #> ALPP               TRUE          FALSE          FALSE #> ACTG1P9            TRUE          FALSE          FALSE #> AHSG               TRUE          FALSE          FALSE #> ASIC2              TRUE          FALSE          FALSE #> ACTG1P10           TRUE          FALSE          FALSE #> ALAS1              TRUE          FALSE          FALSE plotVenn(ov_sets)   # Example with genomic regions (built-in dataset) data(a549_chipseq_peaks) ov_gr <- computeOverlaps(a549_chipseq_peaks) head(ov_gr$overlap_matrix) #>      MED1_Dex_chr7 BRD4_Dex_chr7 GR_Dex_chr7 #> [1,]         FALSE          TRUE       FALSE #> [2,]         FALSE          TRUE       FALSE #> [3,]         FALSE         FALSE        TRUE #> [4,]          TRUE          TRUE        TRUE #> [5,]         FALSE          TRUE       FALSE #> [6,]         FALSE          TRUE       FALSE plotVenn(ov_gr)"},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Overlap Groups to Excel — exportOverlaps","title":"Export Overlap Groups to Excel — exportOverlaps","text":"function exports output extractOverlaps() Excel file, creating one sheet per overlap group. Genomic overlaps (GRanges) converted data frames export.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Overlap Groups to Excel — exportOverlaps","text":"","code":"exportOverlaps(   grouped,   output_dir = \".\",   output_file = \"overlap_groups\",   with_date = TRUE,   verbose = TRUE )"},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Overlap Groups to Excel — exportOverlaps","text":"grouped Overlap groups extractOverlaps(). output_dir string specifying output directory. Defaults \".\". output_file string specifying base filename (without extension). Defaults \"overlap_groups\". with_date Logical (default TRUE). Whether prepend current date (today) filename. verbose Logical. TRUE, print message saved path. Default TRUE.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Overlap Groups to Excel — exportOverlaps","text":"Overlap groups saved Excel file disk. Invisibly returns full path saved file.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Overlap Groups to Excel — exportOverlaps","text":"","code":"res <- computeOverlaps(list(A = letters[1:3], B = letters[2:4])) grouped <- extractOverlaps(res) exportOverlaps(grouped, output_dir = tempdir(), output_file = \"overlap_groups\") #>  > Overlap groups saved in /tmp/RtmpHHWmrH/20251014_overlap_groups.xlsx"},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlapsToBed.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Overlap Groups to BED Files — exportOverlapsToBed","title":"Export Overlap Groups to BED Files — exportOverlapsToBed","text":"function exports genomic overlap groups extractOverlaps() BED format files, creating one BED file per overlap group.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlapsToBed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Overlap Groups to BED Files — exportOverlapsToBed","text":"","code":"exportOverlapsToBed(   grouped,   output_dir = \".\",   output_prefix = \"overlaps\",   with_date = TRUE,   verbose = TRUE )"},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlapsToBed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Overlap Groups to BED Files — exportOverlapsToBed","text":"grouped Genomic overlap groups extractOverlaps() (must GRangesList). output_dir string specifying output directory. Defaults \".\". output_prefix string specifying filename prefix. Defaults \"overlaps\". with_date Logical (default TRUE). Whether prepend current date filenames. verbose Logical. TRUE, print messages. Default TRUE.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlapsToBed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Overlap Groups to BED Files — exportOverlapsToBed","text":"Invisibly returns character vector file paths created.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/exportOverlapsToBed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export Overlap Groups to BED Files — exportOverlapsToBed","text":"function works genomic overlaps (.e., input extractOverlaps() GenomicOverlapResult object, resulting GRangesList). work set overlaps (character vectors). overlap group saved separate BED file group identifier included filename.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/extractOverlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Overlap Groups from Genomic or Set Overlap Results — extractOverlaps","title":"Extract Overlap Groups from Genomic or Set Overlap Results — extractOverlaps","text":"function extracts subsets intersecting elements grouped overlap category (e.g., \"110\"). genomic overlaps, returns GRangesList; set overlaps, returns named list character vectors.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/extractOverlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Overlap Groups from Genomic or Set Overlap Results — extractOverlaps","text":"","code":"extractOverlaps(overlap_object)"},{"path":"https://ckntav.github.io/gVenn/reference/extractOverlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Overlap Groups from Genomic or Set Overlap Results — extractOverlaps","text":"overlap_object GenomicOverlapsResult SetOverlapsResult object.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/extractOverlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Overlap Groups from Genomic or Set Overlap Results — extractOverlaps","text":"named list grouped intersecting elements: input GenomicOverlapsResult, GRangesList split intersect_category. input SetOverlapsResult, named list character vectors grouped intersect_category.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/extractOverlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Overlap Groups from Genomic or Set Overlap Results — extractOverlaps","text":"","code":"# Example with gene sets (built-in dataset) data(gene_list) res_sets <- computeOverlaps(gene_list) group_gene <- extractOverlaps(res_sets) group_gene #> $group_001 #>  [1] \"ACTN1\"  \"ALDOA\"  \"CRYBG1\" \"AK4\"    \"ACYP2\"  \"AFP\"    \"ACTN2\"  \"AMPD3\"  #>  [9] \"ACADS\"  \"ACY1\"   \"ADH1B\"  \"ACTBP7\" \"ADH6\"   \"ACTBP4\" \"ANXA2\"  \"AGXT\"   #> [17] \"TLE5\"   #>  #> $group_010 #>  [1] \"AFM\"       \"ADPRH\"     \"AIF1\"      \"ACVR2A\"    \"ACTA1\"     \"PLIN2\"     #>  [7] \"ALDH1A3\"   \"ALK\"       \"ACTG2\"     \"ADCY8\"     \"ABR\"       \"ADCYAP1\"   #> [13] \"ADRA2A\"    \"ADORA2B\"   \"ADRA1B\"    \"ANXA5\"     \"ACLY\"      \"ANK3\"      #> [19] \"ADCY6\"     \"ACR\"       \"ADAM10\"    \"AARS1\"     \"ACVR2B\"    \"ACO2\"      #> [25] \"ADH1C\"     \"PARP1\"     \"ADD2\"      \"ADARB1\"    \"ADCY2\"     \"ANXA1\"     #> [31] \"ALCAM\"     \"ADORA2A\"   \"AMFR\"      \"AMBN\"      \"NAT2\"      \"A1BG\"      #> [37] \"ACADL\"     \"ADH5\"      \"ACTG1P8\"   \"AADAC\"     \"ACOX1\"     \"ALDH9A1\"   #> [43] \"ANXA2P2\"   \"ADORA2BP1\" \"ADRB3\"     #>  #> $group_100 #>  [1] \"ALPP\"     \"ACTG1P9\"  \"AHSG\"     \"ASIC2\"    \"ACTG1P10\" \"ALAS1\"    #>  [7] \"AKT2\"     \"PARP1P1\"  \"ABCD1\"    \"SLC25A6\"  \"AAMP\"     \"ADCP1\"    #> [13] \"ACADVL\"   \"ACTG1\"    \"ANGPT2\"   \"AGTR1\"    \"ACACB\"    \"ACTBP9\"   #> [19] \"ALDH1B1\"  \"ADAR\"     \"ABCD2\"    \"AMHR2\"    \"ABCB7\"    \"ABCA1\"    #> [25] \"PARP4\"    \"ACTG1P1\"  \"JAG1\"     \"ACTA2\"    \"ADH7\"     \"AP1B1\"    #> [31] \"ACVR1\"    \"ACTN4\"    \"A2MP1\"    \"ABCA4\"    \"ALAD\"     \"ADRA1A\"   #> [37] \"ADCY5\"    \"ALDOB\"    \"AP2B1\"    \"AMELY\"    \"ABL1\"     \"ACTC1\"    #> [43] \"AK2\"      \"ALOX12B\"  \"ACTN3\"    \"AIC\"      \"ALB\"      \"NATP\"     #> [49] \"ANG\"      \"AHR\"      \"ABCA2\"    \"ALPL\"     \"ANXA2P1\"  \"AMELX\"    #> [55] \"AHCY\"     \"PARP1P2\"  \"ALOX5\"    \"AMPD1\"    \"AFA\"      \"ACADSB\"   #> [61] \"AIH3\"     \"ACAN\"     \"AGA\"      \"AMY1C\"    \"ADSS2\"    \"ALDH2\"    #> [67] \"ALOX15B\"  #>  #> $group_011 #>  [1] \"AMY1A\"  \"ACRV1\"  \"ALAS2\"  \"ABCA3\"  \"ALPG\"   \"AMY2A\"  \"ADH4\"   \"ADARB2\" #>  [9] \"NR0B1\"  \"AMYP1\"  \"A2M\"    \"AGTR2\"  \"ALOX15\" \"ACP1\"   \"ADH1A\"  \"AF8T\"   #>  #> $group_101 #> [1] \"NAT1\"   \"ACAA1\"  \"AGT\"    \"AMD1P2\" #>  #> $group_110 #>  [1] \"ADRB1\"    \"ABAT\"     \"ALOX5AP\"  \"ADD1\"     \"ACVR1B\"   \"AANAT\"    #>  [7] \"ADSL\"     \"ADCY7\"    \"ALX3\"     \"ALOX12P1\" \"ANGPT1\"   \"ACTG1P6\"  #> [13] \"ADAM8\"    \"ACHE\"     \"ANCR\"     \"ACP3\"     \"ACP5\"     \"APLNR\"    #> [19] \"ACTBP8\"   \"ADCY1\"    \"ADA\"      #>  #> $group_111 #>  [1] \"ACP2\"      \"ALDH3A1\"   \"ACTB\"      \"ACACA\"     \"ASIC1\"     \"SLC25A5\"   #>  [7] \"ACTL6A\"    \"AMY2B\"     \"AMH\"       \"AMPH\"      \"ADK\"       \"ALDH3A2\"   #> [13] \"ACTG1P3\"   \"ACO1\"      \"ACTG1P7\"   \"ALPI\"      \"ANXA4\"     \"AGL\"       #> [19] \"ADRB2\"     \"ABCF1\"     \"ABO\"       \"AMD1\"      \"ALS3\"      \"ALOX12\"    #> [25] \"AMBP\"      \"AMPD2\"     \"ALDH1A1\"   \"AFG3L1P\"   \"ADFN\"      \"ADCYAP1R1\" #> [31] \"ADD3\"      \"ALOX12P2\"  \"BIN1\"      #>   # Example with genomic regions (built-in dataset) data(a549_chipseq_peaks) res_genomic <- computeOverlaps(a549_chipseq_peaks) group_genomic <- extractOverlaps(res_genomic) group_genomic #> GRangesList object of length 7: #> $group_010 #> GRanges object with 267 ranges and 1 metadata column: #>         seqnames              ranges strand | intersect_category #>            <Rle>           <IRanges>  <Rle> |        <character> #>     [1]     chr7       234690-235402      * |                010 #>     [2]     chr7       538240-538633      * |                010 #>     [3]     chr7     1504294-1504733      * |                010 #>     [4]     chr7     1506830-1507301      * |                010 #>     [5]     chr7     1513353-1513690      * |                010 #>     ...      ...                 ...    ... .                ... #>   [263]     chr7 155618941-155619523      * |                010 #>   [264]     chr7 155644241-155644737      * |                010 #>   [265]     chr7 158829343-158830028      * |                010 #>   [266]     chr7 158856251-158856723      * |                010 #>   [267]     chr7 159012435-159013222      * |                010 #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths #>  #> ... #> <6 more elements>"},{"path":"https://ckntav.github.io/gVenn/reference/gene_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Gene Lists with Overlaps — gene_list","title":"Example Gene Lists with Overlaps — gene_list","text":"synthetic dataset three gene lists, created first 250 human gene symbols org.Hs.eg.db.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/gene_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Gene Lists with Overlaps — gene_list","text":"","code":"gene_list"},{"path":"https://ckntav.github.io/gVenn/reference/gene_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Gene Lists with Overlaps — gene_list","text":"named list length 3. element character vector gene symbols: random_genes_A 125 gene symbols. random_genes_B 115 gene symbols. random_genes_C 70 gene symbols.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/gene_list.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Gene Lists with Overlaps — gene_list","text":"Generated org.Hs.eg.db (keys type SYMBOL), using reproducible random seed.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/gene_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Gene Lists with Overlaps — gene_list","text":"","code":"data(gene_list)  # Inspect the list str(gene_list) #> List of 3 #>  $ random_genes_A: chr [1:125] \"ALPP\" \"ACTG1P9\" \"AHSG\" \"ASIC2\" ... #>  $ random_genes_B: chr [1:115] \"AFM\" \"ADPRH\" \"AIF1\" \"ACVR2A\" ... #>  $ random_genes_C: chr [1:70] \"ACTN1\" \"ALDOA\" \"CRYBG1\" \"AK4\" ...  # Compute overlaps and plot ov <- computeOverlaps(gene_list) plotVenn(ov)"},{"path":"https://ckntav.github.io/gVenn/reference/plotUpSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an UpSet Diagram from Genomic or Set Overlap Results — plotUpSet","title":"Plot an UpSet Diagram from Genomic or Set Overlap Results — plotUpSet","text":"function creates UpSet plot using ComplexHeatmap package visualize intersections across multiple sets. Supports GenomicOverlapsResult SetOverlapsResult objects.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/plotUpSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an UpSet Diagram from Genomic or Set Overlap Results — plotUpSet","text":"","code":"plotUpSet(overlap_object, customSetOrder = NULL)"},{"path":"https://ckntav.github.io/gVenn/reference/plotUpSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an UpSet Diagram from Genomic or Set Overlap Results — plotUpSet","text":"overlap_object GenomicOverlapsResult SetOverlapsResult object returned computeOverlaps. customSetOrder Optional. vector specifying order sets display UpSet diagram. vector contain either numeric indices (corresponding sets overlap object) character names (matching set names). NULL (default), sets displayed decreasing order size (set_size()).","code":""},{"path":"https://ckntav.github.io/gVenn/reference/plotUpSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an UpSet Diagram from Genomic or Set Overlap Results — plotUpSet","text":"UpSet plot object generated ComplexHeatmap::UpSet.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/plotUpSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an UpSet Diagram from Genomic or Set Overlap Results — plotUpSet","text":"","code":"# Example with gene sets (built-in dataset) data(gene_list) res_sets <- computeOverlaps(gene_list)  # Default order (sets sorted by size) plotUpSet(res_sets)   # Custom order by names plotUpSet(res_sets, customSetOrder = c(\"random_genes_C\",                                        \"random_genes_A\",                                        \"random_genes_B\"))   # Example with genomic regions (built-in dataset) data(a549_chipseq_peaks) res_genomic <- computeOverlaps(a549_chipseq_peaks) plotUpSet(res_genomic)"},{"path":"https://ckntav.github.io/gVenn/reference/plotVenn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Venn Diagram from Genomic or Set Overlap Results — plotVenn","title":"Plot a Venn Diagram from Genomic or Set Overlap Results — plotVenn","text":"function creates Venn diagram using eulerr package visualize intersections across multiple sets. Supports GenomicOverlapsResult SetOverlapsResult objects.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/plotVenn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Venn Diagram from Genomic or Set Overlap Results — plotVenn","text":"","code":"plotVenn(   overlap_object,   fills = TRUE,   edges = TRUE,   labels = FALSE,   quantities = list(type = \"counts\"),   legend = \"right\",   main = NULL,   ... )"},{"path":"https://ckntav.github.io/gVenn/reference/plotVenn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Venn Diagram from Genomic or Set Overlap Results — plotVenn","text":"overlap_object GenomicOverlapsResult SetOverlapsResult object returned computeOverlaps. fills Controls fill appearance diagram. Can : logical: TRUE (default) shows fills, FALSE hides character vector: Colors fills. Default colors : c(\"#2B70AB\", \"#FFB027\", \"#3EA742\", \"#CD3301\", \"#9370DB\", \"#008B8B\", \"#D87093\") list: Fine control graphical parameters including fill (colors), alpha (transparency 0-1) edges Controls edge/border appearance. Can : logical: TRUE (default) shows edges, FALSE hides character vector: Colors edges list: Fine control col (colors), alpha (transparency 0-1), lty (line type), lwd (line width), lex (line expansion) labels Controls set labels. Can : logical: TRUE shows default labels, FALSE hides character vector: Custom text labels list: Fine control col (text color), fontsize, font (1=plain, 2=bold, 3=italic, 4=bold italic), fontfamily, cex (character expansion), alpha (transparency 0-1) quantities Controls intersection quantities display. Can : logical: TRUE shows counts, FALSE hides character vector: Custom text labels list: Fine control type (c(\"counts\", \"percent\")), col (text color), fontsize, font, fontfamily, cex, alpha legend Controls legend. Can : logical: FALSE disable character: Position (\"right\", \"top\", \"bottom\", \"left\") list: Fine control side (position), labels (custom labels), col, fontsize, cex, fontfamily main Title plot. Can character, expression, list label (text), col, fontsize, font, fontfamily ... Additional arguments passed plot.euler.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/plotVenn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Venn Diagram from Genomic or Set Overlap Results — plotVenn","text":"Venn diagram plot generated eulerr.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/plotVenn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Venn Diagram from Genomic or Set Overlap Results — plotVenn","text":"","code":"# Example with gene sets data(gene_list) res_sets <- computeOverlaps(gene_list)  # Basic plot plotVenn(res_sets)   # Customize fills with transparency and custom colors plotVenn(res_sets,          fills = list(fill = c(\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\"),                       alpha = 0.6))   # Customize edges plotVenn(res_sets,          edges = list(col = \"darkgray\", lwd = 2, lty = 2))   # Customize labels plotVenn(res_sets,          labels = list(col = \"white\", font = 2, fontsize = 14))   # Show both counts and percentages plotVenn(res_sets,          quantities = list(type = c(\"counts\", \"percent\"),                           col = \"black\", fontsize = 10))   # Add a title plotVenn(res_sets,          main = list(label = \"Gene Set Overlaps\",                      col = \"navy\", fontsize = 16, font = 2))   # Transparent fills with colored borders only plotVenn(res_sets,          fills = \"transparent\",          edges = list(col = c(\"red\", \"blue\", \"green\"), lwd = 3))   # Custom legend plotVenn(res_sets,          legend = list(side = \"bottom\",                       labels = c(\"Treatment A\", \"Treatment B\", \"Control\"),                       fontsize = 12))"},{"path":"https://ckntav.github.io/gVenn/reference/saveViz.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a Visualization to File (PDF, PNG, or SVG) — saveViz","title":"Save a Visualization to File (PDF, PNG, or SVG) — saveViz","text":"function saves visualization object file specified format directory. supports visualizations generated plotVenn(), plotUpSet(), ggplot2, plot object can rendered using print() inside graphics device. Optionally, current date (stored today variable) can prepended filename.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/saveViz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a Visualization to File (PDF, PNG, or SVG) — saveViz","text":"","code":"saveViz(   viz,   output_dir = \".\",   output_file = \"figure_gVenn\",   format = \"pdf\",   with_date = TRUE,   width = 5,   height = 5,   resolution = 300,   verbose = TRUE )"},{"path":"https://ckntav.github.io/gVenn/reference/saveViz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a Visualization to File (PDF, PNG, or SVG) — saveViz","text":"viz visualization object typically created either plotVenn() plotUpSet(), can also ggplot2 plot plot object printable print(). output_dir string specifying output directory. Defaults \".\". output_file string specifying base filename (without extension). Defaults \"viz_genomicVenn\". format Output format. One \"pdf\", \"png\", \"svg\". Defaults \"pdf\". with_date Logical (default TRUE). Whether prepend current date (today) filename. width Width output file inches. Default 5. height Height output file inches. Default 5. resolution Resolution DPI (used PNG). Default 300. verbose Logical. TRUE, print message saved path. Default TRUE.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/saveViz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a Visualization to File (PDF, PNG, or SVG) — saveViz","text":"visualization saved file disk. Invisibly returns full path saved file.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/saveViz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a Visualization to File (PDF, PNG, or SVG) — saveViz","text":"","code":"# Example with a built-in set dataset   data(gene_list)   ov_sets <- computeOverlaps(gene_list)   venn_plot <- plotVenn(ov_sets)   saveViz(venn_plot, output_dir = tempdir(), output_file = \"venn_sets\") #>  > Visualization (pdf) saved in /tmp/RtmpHHWmrH/20251014_venn_sets.pdf    # Example with a built-in genomic dataset   data(a549_chipseq_peaks)   ov_genomic <- computeOverlaps(a549_chipseq_peaks)   upset_plot <- plotUpSet(ov_genomic)   saveViz(upset_plot, output_dir = tempdir(), output_file = \"upset_genomic\") #>  > Visualization (pdf) saved in /tmp/RtmpHHWmrH/20251014_upset_genomic.pdf    # Save as PNG instead of PDF   saveViz(upset_plot, format = \"png\", output_dir = tempdir(), output_file = \"upset_example\") #>  > Visualization (png) saved in /tmp/RtmpHHWmrH/20251014_upset_example.png    # Save as SVG   saveViz(venn_plot, format = \"svg\", output_dir = tempdir(), output_file = \"venn_example\") #>  > Visualization (svg) saved in /tmp/RtmpHHWmrH/20251014_venn_example.svg"},{"path":"https://ckntav.github.io/gVenn/reference/today.html","id":null,"dir":"Reference","previous_headings":"","what":"Today's Date at Package Load Time — today","title":"Today's Date at Package Load Time — today","text":"variable stores current date (\"yyyymmdd\" format) time package loaded. useful reproducible filenames (e.g., saveViz()), automatically set package attached.","code":""},{"path":"https://ckntav.github.io/gVenn/reference/today.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Today's Date at Package Load Time — today","text":"","code":"today"},{"path":"https://ckntav.github.io/gVenn/reference/today.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Today's Date at Package Load Time — today","text":"character string (e.g., \"20250624\").","code":""},{"path":"https://ckntav.github.io/gVenn/reference/today.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Today's Date at Package Load Time — today","text":"","code":"# Print the date stored at package load library(gVenn) today #> [1] \"20251014\"  # Use it in a filename paste0(\"venn_plot_\", today, \".pdf\") #> [1] \"venn_plot_20251014.pdf\""},{"path":[]},{"path":"https://ckntav.github.io/gVenn/news/index.html","id":"new-features-0-99-4","dir":"Changelog","previous_headings":"","what":"New features","title":"gVenn 0.99.4","text":"Add exportOverlapsToBed() function export genomic overlap groups BED format files.","code":""},{"path":"https://ckntav.github.io/gVenn/news/index.html","id":"documentation-0-99-4","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gVenn 0.99.4","text":"Updated vignette include information exportOverlapsToBed() guidance choosing exportOverlaps() (Excel format) exportOverlapsToBed() (BED format) based data type downstream needs.","code":""},{"path":[]},{"path":"https://ckntav.github.io/gVenn/news/index.html","id":"minor-updates-0-99-3","dir":"Changelog","previous_headings":"","what":"Minor updates","title":"gVenn 0.99.3","text":"Set default colors plotVenn().","code":""},{"path":[]},{"path":"https://ckntav.github.io/gVenn/news/index.html","id":"new-features-0-99-2","dir":"Changelog","previous_headings":"","what":"New features","title":"gVenn 0.99.2","text":"Add customization options plotVenn().","code":""},{"path":"https://ckntav.github.io/gVenn/news/index.html","id":"documentation-0-99-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gVenn 0.99.2","text":"Improved clarity function documentation examples. Enhanced vignette additional customization examples plotVenn().","code":""},{"path":[]},{"path":"https://ckntav.github.io/gVenn/news/index.html","id":"minor-updates-0-99-1","dir":"Changelog","previous_headings":"","what":"Minor updates","title":"gVenn 0.99.1","text":"Package refinements documentation improvements Bioconductor submission.","code":""},{"path":[]},{"path":"https://ckntav.github.io/gVenn/news/index.html","id":"new-ffatures-0-99-0","dir":"Changelog","previous_headings":"","what":"New fFatures","title":"gVenn 0.99.0","text":"Initial release gVenn package. computeOverlaps() computes intersections across multiple sets GRanges gene lists, returning counts membership categories. extractOverlaps() retrieves actual elements (regions genes) belong overlap group downstream analysis. exportOverlaps() exports overlap groups Excel file, creating one sheet per group converting GRanges data frames needed. plotVenn() draw proportional Venn diagrams based overlaps genomic regions (e.g., ChIP-seq peaks). plotUpSet() visualize complex overlaps UpSet plot. Added saveViz() export visualizations PDF, PNG, SVG formats, optional date tagging filenames.","code":""}]
