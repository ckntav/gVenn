% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saveViz.R
\name{saveViz}
\alias{saveViz}
\title{Save a Visualization to File (PDF, PNG, or SVG)}
\usage{
saveViz(
  viz,
  output_dir = ".",
  output_file = "figure_genomicVenn",
  format = "pdf",
  with_date = TRUE,
  width = 5,
  height = 5,
  resolution = 300,
  verbose = TRUE
)
}
\arguments{
\item{viz}{A visualization object typically created by either \code{plotVenn()} or \code{plotUpSet()}, but can also be a \code{ggplot2} plot or any other plot object printable with \code{print()}.}

\item{output_dir}{A string specifying the output directory. Defaults to \code{"."}.}

\item{output_file}{A string specifying the base filename (without extension). Defaults to \code{"viz_genomicVenn"}.}

\item{format}{Output format. One of \code{"pdf"}, \code{"png"}, or \code{"svg"}. Defaults to \code{"pdf"}.}

\item{with_date}{Logical (default \code{TRUE}). Whether to prepend the current date (from \code{today}) to the filename.}

\item{width}{Width of the output file in inches. Default is 5.}

\item{height}{Height of the output file in inches. Default is 5.}

\item{resolution}{Resolution in DPI (only used for PNG). Default is 300.}

\item{verbose}{Logical. If \code{TRUE}, print a message with the saved path. Default \code{TRUE}.}
}
\value{
The visualization is saved to a file on disk. Invisibly returns the full path to the saved file.
}
\description{
This function saves a visualization object to a file in the specified format and directory.
It supports visualizations generated by \code{plotVenn()}, \code{plotUpSet()}, \code{ggplot2}, or any other plot object that can be rendered using \code{print()} inside a graphics device.
Optionally, the current date (stored in the \code{today} variable) can be prepended to the filename.
}
\examples{
\dontrun{
  # Example with ggplot2
  library(ggplot2)
  p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
  saveViz(p, output_dir = "viz_example_genomicVenn", output_file = "scatter_plot")

  # Example with Venn plot using 3 ChIP-seq-like GRanges with 1000 peaks each
  set.seed(123)
  gr1 <- GenomicRanges::GRanges(
    seqnames = sample(c("chr1", "chr2"), 1000, replace = TRUE),
    ranges = IRanges::IRanges(start = sample(1:1e6, 1000), width = 150)
  )

  gr2 <- GenomicRanges::GRanges(
    seqnames = sample(c("chr1", "chr2"), 1000, replace = TRUE),
    ranges = IRanges::IRanges(start = sample(1:1.5e6, 1000), width = 150)
  )

  gr3 <- GenomicRanges::GRanges(
    seqnames = sample(c("chr1", "chr2"), 1000, replace = TRUE),
    ranges = IRanges::IRanges(start = sample(1:2e6, 1000), width = 150)
  )

  peaklist <- list(H3K27ac = gr1, ZNF768 = gr2, EP300 = gr3)
  overlap <- computeOverlaps(peaklist)
  venn_plot <- plotVenn(overlap)
  saveViz(venn_plot, output_dir = "viz_example_genomicVenn", output_file = "venn_example")

  # Example with UpSet plot
  upset_plot <- plotUpSet(overlap)
  saveViz(upset_plot, output_dir = "viz_example_genomicVenn", output_file = "upset_example")

  # Save to PNG instead of PDF
  saveViz(upset_plot, format = "png", output_file = "upset_example_png", height = 2.5)

  # Save to SVG
  saveViz(venn_plot, format = "svg", output_file = "venn_example_svg")
}
}
