% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_overlaps.R
\name{compute_genomic_overlaps}
\alias{compute_genomic_overlaps}
\title{Compute Genomic Overlaps Across GRanges Sets}
\usage{
compute_genomic_overlaps(genomic_regions)
}
\arguments{
\item{genomic_regions}{A \code{GRangesList} or a named list of \code{GRanges} objects.
Each element should represent a genomic region set (e.g., ChIP-seq peaks,
annotated genes, etc.).}
}
\value{
An object of class \code{GenomicOverlapsResult}, which is a list with the
following components:
\describe{
\item{reduced_regions}{A \code{GRanges} object containing the reduced (merged)
genomic intervals across all sets.
Each region is annotated with an \code{intersect_category} string representing
the overlap pattern (e.g., \code{"110"}).}
\item{overlap_matrix}{A logical matrix indicating which reduced regions
overlap with which input sets.
Rows correspond to reduced regions; columns correspond to the input sets.}
}
}
\description{
This function computes overlaps across multiple genomic region sets provided
as a \code{GRangesList} or a list of \code{GRanges} objects.
It reduces all regions into a unified, non-redundant set and determines which
original sets each region overlaps.
This facilitates the analysis and visualization of genomic intersection
patterns (e.g., using Venn or UpSet plots).
}
\details{
Internally, the function uses \code{GenomicRanges::reduce()} to merge
overlapping or adjacent regions across all sets.
It then determines overlaps between each reduced region and the original
input sets using \code{IRanges::overlapsAny()}.
The resulting matrix can be used to generate set diagrams or for further
statistical analysis.
}
\examples{
gr1 <- GenomicRanges::GRanges("chr1", IRanges::IRanges(c(100, 500),
                              width = 100))
gr2 <- GenomicRanges::GRanges("chr1", IRanges::IRanges(c(150, 700),
                              width = 100))
gr3 <- GenomicRanges::GRanges("chr1", IRanges::IRanges(c(900),
                              width = 100))

peak_sets <- list(H3K27ac = gr1, MED1 = gr2, BRD4 = gr3)
overlap_result <- compute_genomic_overlaps(peak_sets)

head(overlap_result$overlap_matrix)
GenomicRanges::mcols(overlap_result$reduced_regions)$intersect_category

}
\seealso{
\code{\link[GenomicRanges]{GRangesList}},
\code{\link[GenomicRanges]{reduce}}, \code{\link[IRanges]{overlapsAny}},
\code{\link{plotVenn}}, \code{\link{plotUpset}}
}
